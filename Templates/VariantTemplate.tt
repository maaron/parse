<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace Functional
{
    public class Variant<<#= TypeList #>> : Variant
    {
<# foreach (var i in Indeces) { #>
        public T<#= i #> Item<#= i #> { get { return (T<#= i #>)value; } }
<# } #>

<# foreach (var i in Indeces) { #>
        public bool IsItem<#= i #> { get { return value is T<#= i #>; } }
<# } #>

<# foreach (var i in Indeces) { #>
        public static implicit operator Variant<<#= TypeList #>>(T<#= i #> t)
        {
            return new Variant<<#= TypeList #>>(t);
        }
<# } #>

		public Variant(Variant v) : base(v) {}

<# foreach (var i in Indeces) { #>
        public Variant(T<#= i #> t) : base(t) {}
<# } #>

        public T Visit<T>(<#= VisitFuncParams #>)
        {
<# foreach (var i in Enumerable.Range(1, Count - 1)) { #>
            if (value is T<#= i #>) return f<#= i #>(this.Item<#= i #>);
<# } #>
            else return f<#= Count #>(this.Item<#= Count #>);
        }

        public void Visit(<#= VisitActionParams #>)
        {
<# foreach (var i in Enumerable.Range(1, Count - 1)) { #>
            if (value is T<#= i #>) f<#= i #>(this.Item<#= i #>);
<# } #>
            else f<#= Count #>(this.Item<#= Count #>);
        }

        public override bool Equals(object other)
        {
            var e = other as Variant<<#= TypeList #>>;

            return
                e != null &&
                value.Equals(e.value);
        }

        public override int GetHashCode()
        {
            return value.GetHashCode();
        }
    }
}